<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hzdtf.Persistence.Contract</name>
    </assembly>
    <members>
        <member name="T:Hzdtf.Persistence.Contract.Basic.DefaultConnectionString">
            <summary>
            默认连接字符串
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Basic.DefaultConnectionString.connEnvironmentFactory">
            <summary>
            连接环境工厂
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.DefaultConnectionString.#ctor(Hzdtf.Persistence.Contract.Basic.IEnvironmentTypeConnectionFactory)">
            <summary>
            构造方法
            </summary>
            <param name="connEnvironmentFactory">连接环境工厂</param>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.DefaultConnectionString.Connections">
            <summary>
            连接字符串集合
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.IEnvironmentTypeConnectionFactory">
            <summary>
            环境类型连接工厂接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.DefaultConnectionStringFactory">
            <summary>
            默认连接字符串工厂
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.DefaultConnectionStringFactory.Create(Hzdtf.Utility.Enums.EnvironmentType)">
            <summary>
            创建
            </summary>
            <param name="type">类型</param>
            <returns>产品</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.Default.IPersistenceConnectionDefault">
            <summary>
            持久化连接默认接口
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.Default.IPersistenceConnectionDefault.ExecReturnFuncAndConnectionId``1(System.Func{Hzdtf.Utility.Model.Return.ReturnInfo{``0},System.String,``0},Hzdtf.Utility.Model.Return.ReturnInfo{``0},System.String,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            执行返回函数且带有连接ID
            </summary>
            <typeparam name="OutT">输出类型</typeparam>
            <param name="func">函数</param>
            <param name="returnInfo">返回信息</param>
            <param name="connectionId">连接ID</param>
            <param name="accessMode">访问模式</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.Default.IPersistenceConnectionDefault.ExecReturnFunc``1(System.Func{Hzdtf.Utility.Model.Return.ReturnInfo{``0},``0},Hzdtf.Utility.Model.Return.ReturnInfo{``0})">
            <summary>
            执行返回函数
            </summary>
            <typeparam name="OutT">输出类型</typeparam>
            <param name="func">函数</param>
            <param name="returnInfo">返回信息</param>
            <returns>返回信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.Default.IPersistenceConnectionDefault.ExecProcConnectionId(System.Action{System.String},System.String,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            执行连接ID过程
            如果传过来的连接ID为空，则会创建新的连接ID，结束后会自动注释连接ID，否则不会
            </summary>
            <param name="action">动作</param>
            <param name="connectionId">连接ID</param>
            <param name="accessMode">访问模式</param>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.IDbTransactionFactory">
            <summary>
            数据库事务工厂
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.IDbTransactionFactory.Begin(System.Data.IDbConnection,Hzdtf.Utility.Attr.TransactionAttribute)">
            <summary>
            开启事务
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transAttr">事务特性</param>
            <returns>数据库事务</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.ILocalDbTransactionFactory">
            <summary>
            本地数据库事务工厂
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.DefaultLocalDbTransactionFactory">
            <summary>
            默认本地数据库事务工厂
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.DefaultLocalDbTransactionFactory.Begin(System.Data.IDbConnection,Hzdtf.Utility.Attr.TransactionAttribute)">
            <summary>
            创建
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transAttr">事务特性</param>
            <returns>数据库事务</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.IDistributionDbTransactionFactory">
            <summary>
            分布式数据库事务工厂
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.IDefaultConnectionString">
            <summary>
            默认连接字符串接口
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.IDefaultConnectionString.Connections">
            <summary>
            连接字符串集合
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection">
            <summary>
            持久化连接接口
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.MasterPersistenceConnection">
            <summary>
            主持久化连接信息
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.SlavePersistenceConnection">
            <summary>
            从持久化连接信息
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.DynamcGetConnectionString">
            <summary>
            动态获取连接字符串
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.CreateDbConnection(System.String)">
            <summary>
            创建数据库连接
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.NewConnectionId(Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            新建一个连接ID
            </summary>
            <param name="accessMode">访问模式</param>
            <returns>连接ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.Release(System.String)">
            <summary>
            释放连接ID
            </summary>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.BeginTransaction(System.String,Hzdtf.Utility.Attr.TransactionAttribute)">
            <summary>
            开启事务
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="transAttr">事务特性</param>
            <returns>数据库事务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.IPersistenceConnection.GetDbTransaction(System.String,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            根据连接ID获取数据库事务
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="accessMode">访问模式</param>
            <returns>数据库事务</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.IPersistenceConnectionFactory`1">
            <summary>
            持久化连接工厂接口
            @ 黄振东
            </summary>
            <typeparam name="PersistencerT">持久化类型</typeparam>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.PersistenceConectionInfo">
            <summary>
            持久化连接信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.PersistenceConectionInfo.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.PersistenceConectionInfo.AccessMode">
            <summary>
            访问模式
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase">
            <summary>
            持久化连接基类
            本类支持自定义连接字符串，取连接字符串顺序为：本类重写>回调获取>读取默认（配置文件）
            如果需要动态获取连接字符串，请设置回调：DynamcGetConnectionString
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.log">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.defaultConnectionString">
            <summary>
            默认连接字符串，默认取0主库；1从库
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.dynamcGetConnectionString">
            <summary>
            动态获取连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.DynamcGetConnectionString">
            <summary>
            动态获取连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.MasterPersistenceConnection">
            <summary>
            主持久化连接信息
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.SlavePersistenceConnection">
            <summary>
            从持久化连接信息
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.#ctor(Hzdtf.Persistence.Contract.Basic.IDefaultConnectionString,Hzdtf.Logger.Contract.ILogable)">
            <summary>
            构造方法
            </summary>
            <param name="defaultConnectionString">默认连接字符串，默认取0主库；1从库</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.GetPersistenceConnection(Hzdtf.Utility.Enums.AccessMode,System.Func{System.String},System.Byte)">
            <summary>
            获取持久化连接对象
            </summary>
            <param name="accessMode">访问模式</param>
            <param name="getThisConnString">获取本身连接字符串</param>
            <param name="defaultConnectionStringIndex">默认连接字符串索引</param>
            <returns>持久化连接对象</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.NewConnectionId(Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            新建一个连接ID
            </summary>
            <param name="accessMode">访问模式</param>
            <returns>连接ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.Release(System.String)">
            <summary>
            释放连接ID
            </summary>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.BeginTransaction(System.String,Hzdtf.Utility.Attr.TransactionAttribute)">
            <summary>
            开启事务
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="transAttr">事务特性</param>
            <returns>数据库事务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.GetDbTransaction(System.String,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            根据连接ID获取数据库事务
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="accessMode">访问模式</param>
            <returns>数据库事务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.GetMasterConnectionString">
            <summary>
            获取主连接字符串
            </summary>
            <returns>主连接字符串</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.GetSlaveConnectionString">
            <summary>
            获取从连接字符串
            </summary>
            <returns>从连接字符串</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.CreateDbConnection(System.String)">
            <summary>
            创建数据库连接
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Basic.PersistenceConnectionBase.CreatePersistenceConnection(Hzdtf.Persistence.Contract.Basic.PersistenceConectionInfo,System.String,Hzdtf.Utility.Enums.AccessMode,System.Action{Hzdtf.Persistence.Contract.Basic.PersistenceConectionInfo})">
            <summary>
            创建持久化连接信息
            </summary>
            <param name="persistenceConection">持久化连接</param>
            <param name="connectionString">连接字符串</param>
            <param name="accessMode">访问模式</param>
            <param name="setAction">设置动作</param>
            <returns>持久化连接信息</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Data.IPersistence`2">
            <summary>
            持久化接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
            <typeparam name="ModelT">模型类型</typeparam>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(`0,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(`0,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(`0[],Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID集合查询模型
            </summary>
            <param name="ids">ID集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(`0[],System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID集合查询模型
            </summary>
            <param name="ids">ID集合</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Count(`0,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID统计模型数
            </summary>
            <param name="id">ID</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Count(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            统计模型数
            </summary>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.SelectPage(System.Int32,System.Int32,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.SelectPage(System.Int32,System.Int32,System.String[],System.Boolean,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.AllFieldMapProps">
            <summary>
            所有字段映射集合
            </summary>
            <returns>所有字段映射集合</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.SelectModifyInfoByIdAndGeModifyTime(`1,Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID和大于修改时间查询修改信息（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="model">模型</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>只有修改信息的模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.SelectModifyInfosByIdAndGeModifyTime(`1[],Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID和大于修改时间查询修改信息列表（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="models">模型数组</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>只有修改信息的模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Select(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Count(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            统计模型数
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.SelectPage(System.Int32,System.Int32,System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Insert(`1,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型
            </summary>
            <param name="model">模型</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Insert(`1,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Insert(System.Collections.Generic.IList{`1},Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Insert(System.Collections.Generic.IList{`1},System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.UpdateById(`1,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.UpdateById(`1,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.DeleteById(`0,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID删除模型
            </summary>
            <param name="id">ID</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.DeleteByIds(`0[],Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID数组删除模型
            </summary>
            <param name="ids">ID数组</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Delete(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            删除所有模型
            </summary>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Update(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            更新模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.Delete(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            删除模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistence`2.StrictnessIsExceptionPkRepeat(System.Exception)">
            <summary>
            严格判断异常是否主键重复
            </summary>
            <param name="ex">异常</param>
            <returns>异常是否主键重复</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2">
            <summary>
            持久化异步接口
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
            <typeparam name="ModelT">模型类型</typeparam>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(`0,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(`0,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(`0[],System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID集合查询模型
            </summary>
            <param name="ids">ID集合</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(`0[],System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID集合查询模型
            </summary>
            <param name="ids">ID集合</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.CountAsync(`0,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID统计模型数
            </summary>
            <param name="id">ID</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.CountAsync(System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步统计模型数
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表
            </summary>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectPageAsync(System.Int32,System.Int32,System.String@,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="connectionId">连接ID</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <returns>分页信息任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectPageAsync(System.Int32,System.Int32,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <returns>分页信息任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectModifyInfoByIdAndGeModifyTimeAsync(`1,System.String@,Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID和大于修改时间查询修改信息（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="model">模型</param>
            <param name="connectionId">连接ID</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <returns>只有修改信息的模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectModifyInfosByIdAndGeModifyTimeAsync(`1[],System.String@,Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID和大于修改时间查询修改信息列表（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="models">模型数组</param>
            <param name="connectionId">连接ID</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <returns>只有修改信息的模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectAsync(System.SqlPropInfo,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表
            </summary>
            <param name="param">参数</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.CountAsync(System.SqlPropInfo,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步统计模型数
            </summary>
            <param name="param">参数</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.SelectPageAsync(System.Int32,System.Int32,System.SqlPropInfo,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="param">参数</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.InsertAsync(`1,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型
            </summary>
            <param name="model">模型</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.InsertAsync(`1,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.InsertAsync(System.Collections.Generic.IList{`1},System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.InsertAsync(System.Collections.Generic.IList{`1},System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.UpdateByIdAsync(`1,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.UpdateByIdAsync(`1,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.DeleteByIdAsync(`0,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID删除模型
            </summary>
            <param name="id">ID</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.DeleteByIdsAsync(`0[],System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID数组删除模型
            </summary>
            <param name="ids">ID数组</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.DeleteAsync(System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步删除所有模型
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.UpdateAsync(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            异步更新模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.IPersistenceAsync`2.DeleteAsync(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            异步删除模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Data.PersistenceBase`2">
            <summary>
            持久化基类
            如果可实例化的子类包含有TeantId属性（字段），则默认代表中存在租赁ID，本类对外提供所有的增/删/改/查操作都自动加上租赁ID约束，同时取租赁ID时，默认取当前用户的租房ID属性（则执行UserTool.GetCurrUser()方法）
            @ 黄振东
            </summary>
            <typeparam name="IdT">ID类型</typeparam>
            <typeparam name="ModelT">模型类型</typeparam>
            <summary>
            异步持久化基类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.identity">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.localize">
            <summary>
            本地化
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.dataPermissionFilter">
            <summary>
            数据权限过滤
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.fieldPermissionFilter">
            <summary>
            字段权限过滤
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SqlLogLevel">
            <summary>
            SQL日志等级，默认读取配置文件：Logging:LogLevel:SqlLog
            如果配置文件没有，则默认trace
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.IsSupportIdempotent">
            <summary>
            是否支持幂等 注意：幂等操作不能使用主键自增，需要由业务自己生成主键ID
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.#ctor(Hzdtf.Persistence.Contract.Basic.IDefaultConnectionString,Hzdtf.Logger.Contract.ILogable,Hzdtf.Utility.Model.Identitys.IIdentity{`0},Hzdtf.Utility.Localization.ILocalization,Hzdtf.Persistence.Contract.PermissionFilter.IDataPermissionFilter,Hzdtf.Persistence.Contract.PermissionFilter.IFieldPermissionFilter)">
            <summary>
            构造方法
            </summary>
            <param name="defaultConnectionString">默认连接字符串，默认取0主库；1从库</param>
            <param name="log">日志</param>
            <param name="identity">ID</param>
            <param name="localize">本地化</param>
            <param name="dataPermissionFilter">数据权限过滤</param>
            <param name="fieldPermissionFilter">字段权限过滤</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(`0,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(`0,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(`0[],Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID集合查询模型列表
            </summary>
            <param name="ids">ID集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(`0[],System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID集合查询模型列表
            </summary>
            <param name="ids">ID集合</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Count(`0,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID统计模型数
            </summary>
            <param name="id">ID</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Count(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            统计模型数
            </summary>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPage(System.Int32,System.Int32,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPage(System.Int32,System.Int32,System.String[],System.Boolean,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectModifyInfoByIdAndGeModifyTime(`1,Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID和大于修改时间查询修改信息（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="model">模型</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>只有修改信息的模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectModifyInfosByIdAndGeModifyTime(`1[],Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID和大于修改时间查询修改信息列表（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="models">模型数组</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>只有修改信息的模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Count(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            统计模型数
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPage(System.Int32,System.Int32,System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Insert(`1,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型
            </summary>
            <param name="model">模型</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Insert(`1,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Insert(System.Collections.Generic.IList{`1},Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Insert(System.Collections.Generic.IList{`1},System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.UpdateById(`1,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.UpdateById(`1,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteById(`0,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID删除模型
            </summary>
            <param name="id">ID</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteByIds(`0[],Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            根据ID数组删除模型
            </summary>
            <param name="ids">ID数组</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Delete(Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            删除所有模型
            </summary>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Update(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            更新模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Delete(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            删除模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.StrictnessIsExceptionPkRepeat(System.Exception)">
            <summary>
            严格判断异常是否主键重复
            </summary>
            <param name="ex">异常</param>
            <returns>异常是否主键重复</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(`0,System.Data.IDbConnection,System.Data.IDbTransaction,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(`0[],System.Data.IDbConnection,System.Data.IDbTransaction,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID集合查询模型列表
            </summary>
            <param name="ids">ID集合</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Count(`0,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID统计模型数
            </summary>
            <param name="id">ID</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Count(System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            统计模型数
            </summary>
            <returns>模型数</returns>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(System.Data.IDbConnection,System.Data.IDbTransaction,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            查询模型列表
            </summary>
            <returns>模型列表</returns>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPage(System.Int32,System.Int32,System.Data.IDbConnection,Hzdtf.Utility.Model.FilterInfo,System.Data.IDbTransaction,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="dbConnection">数据库连接</param>
            <param name="filter">筛选</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="propertyNames">属性名称集合</param>>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectModifyInfoByIdAndGeModifyTime(`1,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID和大于修改时间查询修改信息（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="model">模型</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>只有修改信息的模型</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectModifyInfosByIdAndGeModifyTime(`1[],System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID和大于修改时间查询修改信息列表（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="models">模型数组</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>只有修改信息的模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.AllFieldMapProps">
            <summary>
            所有字段映射集合
            </summary>
            <returns>所有字段映射集合</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Select(System.SqlPropInfo,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            查询模型列表
            </summary>
            <param name="param">参数</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型列表</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Count(System.SqlPropInfo,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            统计模型数
            </summary>
            <param name="param">参数</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>模型数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPage(System.Int32,System.Int32,System.Data.IDbConnection,System.SqlPropInfo,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="dbConnection">数据库连接</param>
            <param name="param">参数</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Insert(`1,System.Data.IDbConnection,System.String[],System.Boolean,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            插入模型
            </summary>
            <param name="model">模型</param>
            <param name="dbConnection">数据库连接</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Insert(System.Collections.Generic.IList{`1},System.Data.IDbConnection,System.String[],System.Boolean,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="dbConnection">数据库连接</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.UpdateById(`1,System.Data.IDbConnection,System.Data.IDbTransaction,System.String[],System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteById(`0,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID删除模型
            </summary>
            <param name="id">ID</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteByIds(`0[],System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            根据ID数组删除模型
            </summary>
            <param name="ids">ID数组</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Delete(System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            删除所有模型
            </summary>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Update(System.SqlPropInfo,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            更新模型
            </summary>
            <param name="param">参数</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.Delete(System.SqlPropInfo,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            删除模型
            </summary>
            <param name="param">参数</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SlaveTables">
            <summary>
            从表集合
            Key:表名;Value:外键字段
            </summary>
            <returns>从表集合</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteSlaveTable(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            删除从表
            </summary>
            <param name="table">从表</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteSlaveTableByForeignKeys(System.String,System.String,`0[],System.Data.IDbConnection,System.Data.IDbTransaction,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            删除从表
            </summary>
            <param name="table">从表</param>
            <param name="foreignKeyName">外键名称</param>
            <param name="foreignKeyValues">外键值集合</param>
            <param name="dbConnection">数据库连接</param>
            <param name="dbTransaction">数据库事务</param>
            <param name="comData">通用数据</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.BeforeFilterInfo(Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            过滤信息前
            </summary>
            <param name="filter">过滤</param>
            <param name="comData">通用数据</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.PrimaryKeyIncr(`0)">
            <summary>
            主键是否自增
            </summary>
            <param name="id">ID</param>
            <returns>主键是否自增</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.IsExistsTeantId(Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            是否存在租赁ID
            </summary>
            <param name="comData">通用数据</param>
            <returns>查询时是否需要追加租赁ID为过滤条件</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.IsExistsTeantId(`0@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            是否存在租赁ID
            </summary>
            <param name="currUserTeantId">当前用户租赁ID</param>
            <param name="comData">通用数据</param>
            <returns>是否存在租赁ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.ModelContainerTeantId">
            <summary>
            模型是否包含租赁ID
            </summary>
            <returns>模型是否包含租赁ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.ModelIsSetTeantId(`1)">
            <summary>
            模型是否已设置租赁ID
            </summary>
            <param name="model">模型</param>
            <returns>模型是否已设置租赁ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectIsAppendTeantId">
            <summary>
            查询是否追加租赁ID，默认为否
            </summary>
            <returns>查询是否不追加租赁ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SetTeantId(`1,`0)">
            <summary>
            设置模型的租赁ID
            </summary>
            <param name="model">模型</param>
            <param name="teantId">租赁ID</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.ExecTransaction(System.Action{System.String},Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Attr.TransactionAttribute,System.String)">
            <summary>
            执行事务
            </summary>
            <param name="action">动作回调</param>
            <param name="accessMode">访问模式</param>
            <param name="transAttr">事务特性</param>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.ExecRecordSqlLog``1(System.String,System.Func{``0},Hzdtf.Utility.Model.CommonUseData,System.String[])">
            <summary>
            执行记录SQL日志
            </summary>
            <typeparam name="ReturnT">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="callbackExecDb">回调执行数据库</param>
            <param name="comData">通用数据</param>
            <param name="tag">标签</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(`0,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(`0,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID查询模型
            </summary>
            <param name="id">ID</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(`0[],System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID集合查询模型
            </summary>
            <param name="ids">ID集合</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(`0[],System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID集合查询模型
            </summary>
            <param name="ids">ID集合</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.CountAsync(`0,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID统计模型数
            </summary>
            <param name="id">ID</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.CountAsync(System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步统计模型数
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表
            </summary>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPageAsync(System.Int32,System.Int32,System.String@,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="connectionId">连接ID</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <returns>分页信息任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPageAsync(System.Int32,System.Int32,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.FilterInfo,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="filter">筛选</param>
            <param name="comData">通用数据</param>
            <returns>分页信息任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectModifyInfoByIdAndGeModifyTimeAsync(`1,System.String@,Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID和大于修改时间查询修改信息（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="model">模型</param>
            <param name="connectionId">连接ID</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <returns>只有修改信息的模型任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectModifyInfosByIdAndGeModifyTimeAsync(`1[],System.String@,Hzdtf.Utility.Enums.AccessMode,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID和大于修改时间查询修改信息列表（多用于乐观锁的判断，以修改时间为判断）
            </summary>
            <param name="models">模型数组</param>
            <param name="connectionId">连接ID</param>
            <param name="mode">访问模式，默认为主库</param>
            <param name="comData">通用数据</param>
            <returns>只有修改信息的模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectAsync(System.SqlPropInfo,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表
            </summary>
            <param name="param">参数</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型列表任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.CountAsync(System.SqlPropInfo,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步统计模型数
            </summary>
            <param name="param">参数</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>模型数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.SelectPageAsync(System.Int32,System.Int32,System.SqlPropInfo,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步查询模型列表并分页
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页记录数</param>
            <param name="param">参数</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>分页信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.InsertAsync(`1,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型
            </summary>
            <param name="model">模型</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.InsertAsync(`1,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.InsertAsync(System.Collections.Generic.IList{`1},System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.InsertAsync(System.Collections.Generic.IList{`1},System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步插入模型列表
            </summary>
            <param name="models">模型列表</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.UpdateByIdAsync(`1,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.UpdateByIdAsync(`1,System.String[],System.String@,System.Boolean,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID更新模型
            </summary>
            <param name="model">模型</param>
            <param name="propertyNames">属性名称集合</param>
            <param name="connectionId">连接ID</param>
            <param name="isPropertyGetNot">属性是否取反，如果取反，则propertyNames则为排除的属性名称集合</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteByIdAsync(`0,System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID删除模型
            </summary>
            <param name="id">ID</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteByIdsAsync(`0[],System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步根据ID数组删除模型
            </summary>
            <param name="ids">ID数组</param>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteAsync(System.String@,Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            异步删除所有模型
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="comData">通用数据</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.UpdateAsync(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            异步更新模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.DeleteAsync(System.SqlPropInfo,Hzdtf.Utility.Model.CommonUseData,System.String)">
            <summary>
            异步删除模型
            </summary>
            <param name="param">参数</param>
            <param name="comData">通用数据</param>
            <param name="connectionId">连接ID</param>
            <returns>影响行数任务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Data.PersistenceBase`2.ExecAsync``1(System.String,System.Boolean,System.Data.IDbConnection,System.Func{System.Data.IDbTransaction,``0},Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            异步执行
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="connectionId">连接ID</param>
            <param name="isClose">是否关闭</param>
            <param name="dbConnection">数据库连接</param>
            <param name="func">函数</param>
            <param name="mode">访问模式</param>
            <returns>结果任务</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Data.PersistenceParamWrapInfo">
            <summary>
            持久化参数包装信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceParamWrapInfo.PropertyNames">
            <summary>
            属性名称数组，如果为空，则默认所有
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceParamWrapInfo.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceParamWrapInfo.FilterSql">
            <summary>
            过滤SQL，如果为空，则不添加任何条件语句
            使用属性名过滤，属性名需要加前后辍，使用"SqlUtil.FilterPrefix属性名SqlUtil.FilterSuffixes"
            注意不用加WHERE
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceParamWrapInfo.ComData">
            <summary>
            通用数据
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Data.PersistenceParamWrapInfo.ConnectionId">
            <summary>
            连接ID
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Intercepteds.TransactionBeforeMethodCache">
            <summary>
            事务执行前方法缓存
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Intercepteds.TransactionBeforeMethodCache.dicCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Intercepteds.TransactionBeforeMethodCache.GetCache">
            <summary>
            获取缓存
            </summary>
            <returns>缓存</returns>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Intercepteds.TransactionInterceptor">
            <summary>
            事务拦截器
            connectionId是关键点，引用方法必须要指定该参数的索引位置
            此拦截器会根据索引位置获取到connectionId，如果之前有设置值，则在本拦截器里不会开启新的事务
            开启了新事务后，会执行业务方法会把新创建的connectionId传入到业务方法对应参数里
            如果业务方法里有抛出异常或返回值为ReturnInfo.Code失败，则会回滚
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Intercepteds.TransactionInterceptor.beforeMethodCache">
            <summary>
            事务执行前方法缓存
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Intercepteds.TransactionInterceptor.Intercept(Hzdtf.Utility.Model.Return.BasicReturnInfo,Castle.DynamicProxy.IInvocation,Hzdtf.Utility.Attr.TransactionAttribute,System.Boolean@)">
            <summary>
            拦截
            </summary>
            <param name="basicReturn">基本返回</param>
            <param name="invocation">拦截参数</param>
            <param name="attr">特性</param>
            <param name="isExecProceeded">是否已执行</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Intercepteds.TransactionInterceptor.GetExecedReturn(Castle.DynamicProxy.IInvocation)">
            <summary>
            获取执行完的返回对象
            </summary>
            <param name="invocation">拦截参数</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Intercepteds.TransactionInterceptor.ExecSuccessCallback(Hzdtf.Utility.Model.CommonUseData)">
            <summary>
            执行成功后的回调
            </summary>
            <param name="comData">通用数据</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Intercepteds.TransactionInterceptor.ExecBeforeTransaction(Castle.DynamicProxy.IInvocation,Hzdtf.Utility.Attr.TransactionAttribute)">
            <summary>
            执行开启事务前
            执行前必须先设置好连接ID
            </summary>
            <param name="invocation">拦截参数</param>
            <param name="attr">特性</param>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Management.DbConnectionManager">
            <summary>
            数据库连接管理器
            @ 黄振东
            </summary>
            <summary>
            数据库连接管理器
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Management.DbConnectionManager.dicDbConnections">
            <summary>
            数据库连接字典
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbConnectionManager.CurrDbConnCount">
            <summary>
            当前数据库连接数
            </summary>
        </member>
        <member name="F:Hzdtf.Persistence.Contract.Management.DbConnectionManager.dicDbTransaction">
            <summary>
            数据库事务字典
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbConnectionManager.CurrDbTransactionCount">
            <summary>
            当前数据库事务数
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbConnectionManager.LocalDbTransactionFactory">
            <summary>
            数据库事务工厂
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbConnectionManager.DistributionDbTransactionFactory">
            <summary>
            分布式事务工厂
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.GetDbConnection(System.String,Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,System.String@,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            获取数据库连接
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="persistenceConnection">持久化连接</param>
            <param name="connectionString">连接字符串</param>
            <param name="accessMode">访问模式</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.BrainpowerExecute(System.String,Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,System.Action{System.String,System.Data.IDbConnection},Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            智能执行
            根据连接ID会判断是否已经存在该连接，如果存在则直接引用存在的连接，否则新创建
            </summary>
            <param name="connectionId">连接ID（如果需要执行一连串则设置相同连接ID，一旦传入该值，则不会关闭此链接，需要调用方关闭。[前提是先执行新建连接ID]]）</param>
            <param name="persistenceConnection">持久化连接</param>
            <param name="action">动作</param>
            <param name="accessMode">访问模式</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.NewConnectionId(Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            新建一个连接ID
            </summary>
            <param name="persistenceConnection">持久化连接</param>>
            <param name="accessMode">访问模式</param>
            <returns>连接ID</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.BeginTransaction(System.String,Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,Hzdtf.Utility.Attr.TransactionAttribute)">
            <summary>
            开启事务
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="persistenceConnection">持久化连接</param>
            <param name="transAttr">事务特性</param>
            <returns>数据库事务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.ReleaseAll">
            <summary>
            释放所有
            </summary>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.Release(System.String,System.Data.IDbConnection)">
            <summary>
            根据连接ID和数据库连接释放
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="dbConnection">数据库连接</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.Release(System.String)">
            <summary>
            根据连接ID释放
            </summary>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.GetDbTransaction(System.String,Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            根据连接ID获取数据库事务
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="persistenceConnection">持久化连接</param>
            <param name="accessMode">访问模式</param>
            <returns>数据库事务</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.GetPersistenceConnectionInfo(Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            获取持久化连接信息
            </summary>
            <param name="persistenceConnection">持久化连接</param>>
            <param name="accessMode">访问模式</param>
            <returns>持久化连接信息</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.AddDicValue(System.String,Hzdtf.Persistence.Contract.Management.DbConnectionEx)">
            <summary>
            添加键值
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="dbConnectionEx">数据库连接</param>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.GetDbConnectionFromCache(System.String,System.String,System.Boolean@)">
            <summary>
            从缓存里获取数据库连接
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="connectionString">连接字符串</param>
            <param name="isExistsConnection">是否存在连接</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.GetDbConnection(System.String,Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,System.Boolean@,System.String@,Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            获取数据库连接
            </summary>
            <param name="connectionId">连接ID</param>
            <param name="persistenceConnection">持久化连接</param>
            <param name="isExistsConnection">是否存在连接</param>
            <param name="connectionString">连接字符串</param>
            <param name="accessMode">访问模式</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.Management.DbConnectionManager.BrainpowerExecuteAsync(System.String@,Hzdtf.Persistence.Contract.Basic.IPersistenceConnection,System.Action{System.String,System.Boolean,System.Data.IDbConnection},Hzdtf.Utility.Enums.AccessMode)">
            <summary>
            异步智能执行
            根据连接ID会判断是否已经存在该连接，如果存在则直接引用存在的连接，否则新创建
            因为执行业务方法是异步，本程序不自动关闭连接，由业务自行关闭
            </summary>
            <param name="connectionId">连接ID（如果需要执行一连串则设置相同连接ID，一旦传入该值，则不会关闭此链接，需要调用方关闭。[前提是先执行新建连接ID]]）</param>
            <param name="persistenceConnection">持久化连接</param>
            <param name="action">动作</param>
            <param name="accessMode">访问模式</param>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Management.DbConnectionEx">
            <summary>
            数据库连接扩展
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbConnectionEx.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbConnectionEx.DbConnection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.Management.DbTransactionEx">
            <summary>
            数据库事务扩展
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbTransactionEx.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.Management.DbTransactionEx.DbTransaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.PermissionFilter.DataPermissionFilterInfo">
            <summary>
            数据权限过滤信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.DataPermissionFilterInfo.Params">
            <summary>
            参数字典，key：参数名，value：参数值
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.PermissionFilter.FieldPermissionFilterInfo">
            <summary>
            字段权限过滤信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.FieldPermissionFilterInfo.PropTexts">
            <summary>
            属性文本列表，key：属性名，value：属性文本
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.PermissionFilter.IDataPermissionFilter">
            <summary>
            数据权限过滤接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.PermissionFilter.IFieldPermissionFilter">
            <summary>
            字段权限过滤接口
            @ 黄振东
            </summary>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.PermissionFilter.IPermissionFilter`1">
            <summary>
            权限过滤接口
            @ 黄振东
            </summary>
            <typeparam name="PermissionFilterT">权限过滤类型</typeparam>
        </member>
        <member name="M:Hzdtf.Persistence.Contract.PermissionFilter.IPermissionFilter`1.DoFilter(`0)">
            <summary>
            去过滤
            </summary>
            <param name="permissionFilter">权限筛选</param>
        </member>
        <member name="T:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo">
            <summary>
            权限筛选信息
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.ComData">
            <summary>
            通用数据
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.Sql">
            <summary>
            SQL
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.SqlEmptyNotFilter">
            <summary>
            SQL为空则不过滤，默认为是
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.TablePfx">
            <summary>
            表前辍
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.PersistenceClassName">
            <summary>
            持久化类名
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.PersistenceMethodName">
            <summary>
            持久化方法名
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.DbConnection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Hzdtf.Persistence.Contract.PermissionFilter.PermissionFilterInfo.DbTransaction">
            <summary>
            数据库事务
            </summary>
        </member>
    </members>
</doc>
